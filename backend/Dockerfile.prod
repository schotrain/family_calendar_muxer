# Production Dockerfile for Go backend
# Multi-stage build for static compilation

# Stage 1: Build stage
FROM golang:1.25.1-alpine AS builder

# Install build dependencies for CGO (required for postgres driver)
RUN apk add --no-cache gcc musl-dev postgresql-dev

WORKDIR /app

# Copy go mod files and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy source code (excluding files in .dockerignore)
COPY . .

# Build the application with static compilation
# CGO is needed for PostgreSQL driver
ENV CGO_ENABLED=1

# Build with static linking and optimizations
# Remove GOOS/GOARCH to let it use the container's native architecture
RUN go build -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -tags netgo,osusergo \
    -o /app/server .

# Stage 2: Runtime stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache ca-certificates postgresql-client tzdata

# Create non-root user for security
RUN addgroup -g 1000 appuser && \
    adduser -D -u 1000 -G appuser appuser

WORKDIR /app

# Copy the statically compiled binary from builder
COPY --from=builder --chown=appuser:appuser /app/server .

# Copy template files needed at runtime
COPY --from=builder --chown=appuser:appuser /app/auth/templates ./auth/templates

# Switch to non-root user
USER appuser

# Expose backend port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run the application
CMD ["./server"]