name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: family_calendar_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DB_TYPE: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: family_calendar_test
          DB_SSLMODE: disable
          JWT_SECRET: test-secret-key
          USE_SECURE_CONNECTIONS: false
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret
          GOOGLE_REDIRECT_URL: http://localhost:8080/auth/google/callback
          ALLOWED_CALLBACKS: http://localhost:3000/auth/callback
          CORS_ALLOWED_ORIGIN: http://localhost:3000
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: Generate coverage report
        working-directory: ./backend
        run: go tool cover -func=coverage.out

      - name: Check coverage threshold
        working-directory: ./backend
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${coverage}%"
          if (( $(echo "$coverage < 90" | bc -l) )); then
            echo "❌ Coverage ${coverage}% is below 90% threshold"
            exit 1
          fi
          echo "✅ Coverage ${coverage}% meets 90% threshold"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: TODO - Build Docker image
        run: |
          echo "TODO: Build backend Docker image"
          echo "TODO: Tag image appropriately"
          echo "TODO: Push to container registry"
